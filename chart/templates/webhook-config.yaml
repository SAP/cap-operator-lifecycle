{{- if gt (int .Values.webhook.replicas) 0 }}
{{- $caCert := "" }}
---
{{- if and (.Capabilities.APIVersions.Has "cert-manager.io/v1") (eq .Values.webhook.certificateManager "CertManager") }}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: {{.Release.Name}}-webhook-cert
  labels:
    operator.sme.sap.com/app: webhook
    operator.sme.sap.com/category: controller
    operator.sme.sap.com/release: {{.Release.Name}}
spec:
  dnsNames:
  - {{.Release.Name}}-webhook
  - {{.Release.Name}}-webhook.{{ .Release.Namespace }}
  - {{.Release.Name}}-webhook.{{ .Release.Namespace }}.svc
  - {{.Release.Name}}-webhook.{{ .Release.Namespace }}.svc.cluster.local
  issuerRef:
    {{- with .Values.webhook.certificateConfig.certManager.issuerGroup }}
    group: {{ . }}
    {{- end }}
    {{- with .Values.webhook.certificateConfig.certManager.issuerKind }}
    kind: {{ . }}
    {{- end }}
    {{- with .Values.webhook.certificateConfig.certManager.issuerName }}
    name: {{ . }}
    {{- end }}
  secretName: {{.Release.Name}}-webhook-tls-managed
{{- else }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{.Release.Name}}-webhook-tls
  labels:
    operator.sme.sap.com/app: webhook
    operator.sme.sap.com/category: controller
    operator.sme.sap.com/release: {{.Release.Name}}
type: Opaque
data:
  {{- $cn := printf "%s-webhook.%s.svc" .Release.Name .Release.Namespace }}
  {{- $certValidityDays := 1000 }}
  {{- $regenThresholdDays := 60 }}
  {{- $currentTime := now | unixEpoch }}
  {{- $data := (lookup "v1" "Secret" .Release.Namespace (printf "%s-webhook-tls" .Release.Name )).data }}
  {{- if $data }}
    {{- $caCert = index $data "ca.crt" }}
    {{- if (hasKey $data "ca.key") }}
      {{- $caKey := index $data "ca.key" }}
      {{- $expiryTime := index $data "tls.expiry" | default "0" | b64dec | int }}
      {{- $daysLeft := div (sub $expiryTime $currentTime) 86400 }}
      {{- if lt $daysLeft $regenThresholdDays }}
        {{- $newCertExpiry := add $currentTime (mul $certValidityDays 86400) }}
        {{- $customCa := buildCustomCert $caCert $caKey }}
        {{- $customCaCert := genSignedCert $cn (list "127.0.0.1") (list $cn "localhost") $certValidityDays $customCa }}
        ca.crt: {{ $caCert }}
        ca.key: {{ $caKey }}
        tls.crt: {{ $customCaCert.Cert | b64enc }}
        tls.key: {{ $customCaCert.Key | b64enc }}
        tls.expiry: {{ $newCertExpiry | printf "%d" | b64enc }}
      {{- else }}
        ca.crt: {{ $caCert }}
        ca.key: {{ $caKey }}
        tls.crt: {{ index $data "tls.crt" }}
        tls.key: {{ index $data "tls.key" }}
        tls.expiry: {{ $expiryTime | printf "%d" | b64enc }}
      {{- end }}
    {{- else }}
      {{ $data | toYaml | nindent 2 }}
    {{- end }}
  {{- else }}
    {{- $newCertExpiry := add $currentTime (mul $certValidityDays 86400) }}
    {{- $ca := genCA (printf "%s-webhook-ca" .Release.Name  ) 3650 }}
    {{- $cert := genSignedCert $cn (list "127.0.0.1") (list $cn "localhost") $certValidityDays $ca }}
    ca.crt: {{ $ca.Cert | b64enc }}
    ca.key: {{ $ca.Key | b64enc }}
    tls.crt: {{ $cert.Cert | b64enc }}
    tls.key: {{ $cert.Key | b64enc }}
    tls.expiry: {{ $newCertExpiry | printf "%d" | b64enc }}
    {{- $caCert = $ca.Cert | b64enc }}
  {{- end }}
{{- end }}
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: cap-operator
  labels:
    operator.sme.sap.com/app: webhook
    operator.sme.sap.com/category: controller
    operator.sme.sap.com/release: {{.Release.Name}}
  {{- if and (.Capabilities.APIVersions.Has "cert-manager.io/v1") (eq .Values.webhook.certificateManager "CertManager") }}
  annotations:
    cert-manager.io/inject-ca-from: {{.Release.Namespace}}/{{.Release.Name}}-webhook-cert
  {{- end }}
webhooks:
- name: cap-operator.sme.sap.com
  admissionReviewVersions:
  - v1
  clientConfig:
    {{- if not (and (.Capabilities.APIVersions.Has "cert-manager.io/v1") (eq .Values.webhook.certificateManager "CertManager")) }}
    caBundle: {{ $caCert }}
    {{- end }}
    service:
      name: {{.Release.Name}}-webhook
      namespace: {{ .Release.Namespace }}
      path: /validate
      port: {{ .Values.webhook.service.port }}
  rules:
    - apiGroups:
      - sme.sap.com
      apiVersions:
      - v1alpha1
      operations:
      - CREATE
      - UPDATE
      - DELETE
      resources:
      - capapplications
      - captenants
      - capapplicationversions
      - captenantoutputs
      - domains
      - clusterdomains
  sideEffects: NoneOnDryRun
  timeoutSeconds: 15 # https://github.com/gardener/gardener/pull/6090
  failurePolicy: Fail
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: cap-operator
  labels:
    operator.sme.sap.com/app: webhook
    operator.sme.sap.com/category: controller
    operator.sme.sap.com/release: {{.Release.Name}}
  {{- if and (.Capabilities.APIVersions.Has "cert-manager.io/v1") (eq .Values.webhook.certificateManager "CertManager") }}
  annotations:
    cert-manager.io/inject-ca-from: {{.Release.Namespace}}/{{.Release.Name}}-webhook-cert
  {{- end }}
webhooks:
- name: cap-operator.sme.sap.com
  admissionReviewVersions:
  - v1
  clientConfig:
    {{- if not (and (.Capabilities.APIVersions.Has "cert-manager.io/v1") (eq .Values.webhook.certificateManager "CertManager")) }}
    caBundle: {{ $caCert }}
    {{- end }}
    service:
      name: {{.Release.Name}}-webhook
      namespace: {{ .Release.Namespace }}
      path: /mutate
      port: {{ .Values.webhook.service.port }}
  rules:
    - apiGroups:
      - sme.sap.com
      apiVersions:
      - v1alpha1
      operations:
      - CREATE
      - UPDATE
      resources:
      - capapplications
  sideEffects: NoneOnDryRun
  timeoutSeconds: 15 # https://github.com/gardener/gardener/pull/6090
  failurePolicy: Fail
---
{{- end }}
